{"version":3,"sources":["app/Navbar.js","features/posts/PostAuthor.js","features/posts/TimeAgo.js","features/posts/postsSlice.js","features/posts/ReactionButtons.js","features/posts/PostsList.js","features/posts/AddPostForm.js","features/posts/EditPostForm.js","features/posts/SinglePostPage.js","App.js","api/server.js","features/users/usersSlice.js","app/store.js","index.js"],"names":["Navbar","style","position","left","className","to","PostAuthor","userId","author","useSelector","state","users","find","user","id","name","TimeAgo","timestamp","timeAgo","date","parseISO","timePeriod","formatDistanceToNow","title","initialState","content","sub","Date","minutes","toISOString","reactions","thumbsUp","hooray","heart","rocket","eyes","postsSlice","createSlice","reducers","postAdded","reducer","action","push","payload","prepare","nanoid","reactionAdded","postId","reaction","existingPost","post","postUpdated","actions","reactionEmoji","ReactionButtons","dispatch","useDispatch","reactionButtons","Object","entries","map","emoji","key","type","onClick","PostsList","renderedPosts","posts","slice","sort","a","b","localeCompare","substring","AddPostForm","useState","setTitle","setContent","setUserId","canSave","Boolean","usersOptions","value","htmlFor","placeholder","onChange","e","target","disabled","EditPostForm","match","params","history","useHistory","SinglePostPage","App","seedDate","exact","path","render","Fragment","component","usersSlice","configureStore","postsReducer","usersReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","notificationTemplates","Server","routes","this","namespace","resource","server","schema","req","data","normalizedRequestAttrs","Error","create","get","comments","pastDate","numNotifications","now","queryParams","since","valueOf","setMinutes","getMinutes","notifications","Array","db","template","between","message","read","isNew","models","Model","hasMany","belongsTo","comment","notification","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","association","past","text","paragraph","serializers","seeds","ReactDOM","StrictMode","store","document","getElementById"],"mappings":"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","file":"static/js/main.b64e6ba4.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Navbar = () => {\n  return (\n    <nav>\n      <section>\n        <h1 style={{position: \"relative\", left: \"150px\"}}>Local Posting Media</h1>\n\n        <div className=\"navContent\">\n          <div className=\"navLinks\">\n            <Link to=\"/\">Posts</Link>\n          </div>\n        </div>\n      </section>\n    </nav>\n  )\n}\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const PostAuthor = ({ userId }) => {\r\n  const author = useSelector((state) =>\r\n    state.users.find((user) => user.id === userId)\r\n  )\r\n\r\n  return <span>by {author ? author.name : 'Unknown author'}</span>\r\n}","import React from 'react'\r\nimport { parseISO, formatDistanceToNow } from 'date-fns'\r\n\r\nexport const TimeAgo = ({ timestamp }) => {\r\n  let timeAgo = ''\r\n  if (timestamp) {\r\n    const date = parseISO(timestamp)\r\n    const timePeriod = formatDistanceToNow(date)\r\n    timeAgo = `${timePeriod} ago`\r\n  }\r\n\r\n  return (\r\n    <span title={timestamp}>\r\n      &nbsp; <i>{timeAgo}</i>\r\n    </span>\r\n  )\r\n}\r\n","import { createSlice, nanoid } from '@reduxjs/toolkit'\r\nimport { sub } from 'date-fns'\r\n\r\nconst initialState = [\r\n  {\r\n    id: '1',\r\n    title: 'First Post!',\r\n    content: 'Hello!',\r\n    user: '0',\r\n    date: sub(new Date(), { minutes: 10 }).toISOString(),\r\n    reactions: {\r\n      thumbsUp: 0,\r\n      hooray: 0,\r\n      heart: 0,\r\n      rocket: 0,\r\n      eyes: 0,\r\n    },\r\n  },\r\n  {\r\n    id: '2',\r\n    title: 'Second Post',\r\n    content: 'More text',\r\n    user: '2',\r\n    date: sub(new Date(), { minutes: 5 }).toISOString(),\r\n    reactions: {\r\n      thumbsUp: 0,\r\n      hooray: 0,\r\n      heart: 0,\r\n      rocket: 0,\r\n      eyes: 0,\r\n    },\r\n  },\r\n]\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    postAdded: {\r\n      reducer(state, action) {\r\n        state.push(action.payload)\r\n      },\r\n      prepare(title, content, userId) {\r\n        return {\r\n          payload: {\r\n            id: nanoid(),\r\n            date: new Date().toISOString(),\r\n            title,\r\n            content,\r\n            user: userId,\r\n            reactions: {\r\n              thumbsUp: 0,\r\n              hooray: 0,\r\n              heart: 0,\r\n              rocket: 0,\r\n              eyes: 0,\r\n            },\r\n          },\r\n        }\r\n      },\r\n    },\r\n    reactionAdded(state, action) {\r\n      const { postId, reaction } = action.payload\r\n      const existingPost = state.find((post) => post.id === postId)\r\n      if (existingPost) {\r\n        existingPost.reactions[reaction]++\r\n      }\r\n    },\r\n    postUpdated(state, action) {\r\n      const { id, title, content } = action.payload\r\n      const existingPost = state.find((post) => post.id === id)\r\n      if (existingPost) {\r\n        existingPost.title = title\r\n        existingPost.content = content\r\n      }\r\n    },\r\n  },\r\n})\r\n\r\nexport const { postAdded, postUpdated, reactionAdded } = postsSlice.actions\r\n\r\nexport default postsSlice.reducer\r\n","import React from 'react'\r\nimport { useDispatch } from 'react-redux'\r\n\r\nimport { reactionAdded } from './postsSlice'\r\n\r\nconst reactionEmoji = {\r\n  thumbsUp: '👍',\r\n  hooray: '🎉',\r\n  heart: '❤️',\r\n  rocket: '🚀',\r\n  eyes: '👀',\r\n}\r\n\r\nexport const ReactionButtons = ({ post }) => {\r\n  const dispatch = useDispatch()\r\n\r\n  const reactionButtons = Object.entries(reactionEmoji).map(([name, emoji]) => {\r\n    return (\r\n      <button\r\n        key={name}\r\n        type=\"button\"\r\n        className=\"muted-button reaction-button\"\r\n        onClick={() =>\r\n          dispatch(reactionAdded({ postId: post.id, reaction: name }))\r\n        }\r\n      >\r\n        {emoji} {post.reactions[name]}\r\n      </button>\r\n    )\r\n  })\r\n\r\n  return <div>{reactionButtons}</div>\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\nimport { ReactionButtons } from './ReactionButtons'\r\n\r\nexport const PostsList = () => {\r\n  const posts = useSelector((state) => state.posts)\r\n\r\n  // Sort posts in reverse chronological order by datetime string\r\n  const orderedPosts = posts\r\n    .slice()\r\n    .sort((a, b) => b.date.localeCompare(a.date))\r\n\r\n  const renderedPosts = orderedPosts.map((post) => {\r\n    return (\r\n      <article className=\"post-excerpt\" key={post.id}>\r\n        <h3>{post.title}</h3>\r\n        <div>\r\n          <PostAuthor userId={post.user} />\r\n          <TimeAgo timestamp={post.date} />\r\n        </div>\r\n        <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n\r\n        <ReactionButtons post={post} />\r\n        <Link to={`/posts/${post.id}`} className=\"button muted-button\">\r\n          View Post\r\n        </Link>\r\n      </article>\r\n    )\r\n  })\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Posts</h2>\r\n      {renderedPosts}\r\n    </section>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\n\r\nimport { postAdded } from './postsSlice'\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState('')\r\n  const [content, setContent] = useState('')\r\n  const [userId, setUserId] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n  const users = useSelector((state) => state.users)\r\n\r\n  const onTitleChanged = (e) => setTitle(e.target.value)\r\n  const onContentChanged = (e) => setContent(e.target.value)\r\n  const onAuthorChanged = (e) => setUserId(e.target.value)\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(postAdded(title, content, userId))\r\n      setTitle('')\r\n      setContent('')\r\n    }\r\n  }\r\n\r\n  const canSave = Boolean(title) && Boolean(content) && Boolean(userId)\r\n\r\n  const usersOptions = users.map((user) => (\r\n    <option key={user.id} value={user.id}>\r\n      {user.name}\r\n    </option>\r\n  ))\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postAuthor\">Author:</label>\r\n        <select id=\"postAuthor\" value={userId} onChange={onAuthorChanged}>\r\n          <option value=\"\"></option>\r\n          {usersOptions}\r\n        </select>\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"button\" onClick={onSavePostClicked} disabled={!canSave}>\r\n          Save Post\r\n        </button>\r\n      </form>\r\n    </section>\r\n  )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { postUpdated } from './postsSlice'\r\n\r\nexport const EditPostForm = ({ match }) => {\r\n  const { postId } = match.params\r\n\r\n  const post = useSelector((state) =>\r\n    state.posts.find((post) => post.id === postId)\r\n  )\r\n\r\n  const [title, setTitle] = useState(post.title)\r\n  const [content, setContent] = useState(post.content)\r\n\r\n  const dispatch = useDispatch()\r\n  const history = useHistory()\r\n\r\n  const onTitleChanged = (e) => setTitle(e.target.value)\r\n  const onContentChanged = (e) => setContent(e.target.value)\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(postUpdated({ id: postId, title, content }))\r\n      history.push(`/posts/${postId}`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h2>Edit Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          placeholder=\"What's on your mind?\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n      </form>\r\n      <button type=\"button\" onClick={onSavePostClicked}>\r\n        Save Post\r\n      </button>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { PostAuthor } from './PostAuthor'\r\nimport { TimeAgo } from './TimeAgo'\r\nimport { ReactionButtons } from './ReactionButtons'\r\n\r\nexport const SinglePostPage = ({ match }) => {\r\n  const { postId } = match.params\r\n\r\n  const post = useSelector((state) =>\r\n    state.posts.find((post) => post.id === postId)\r\n  )\r\n\r\n  if (!post) {\r\n    return (\r\n      <section>\r\n        <h2>Post not found!</h2>\r\n      </section>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <article className=\"post\">\r\n        <h2>{post.title}</h2>\r\n        <div>\r\n          <PostAuthor userId={post.user} />\r\n          <TimeAgo timestamp={post.date} />\r\n        </div>\r\n        <p className=\"post-content\">{post.content}</p>\r\n        <ReactionButtons post={post} />\r\n        <Link to={`/editPost/${post.id}`} className=\"button\">\r\n          Edit Post\r\n        </Link>\r\n      </article>\r\n    </section>\r\n  )\r\n}\r\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom'\n\nimport { Navbar } from './app/Navbar'\n\nimport { PostsList } from './features/posts/PostsList'\nimport { AddPostForm } from './features/posts/AddPostForm'\nimport { EditPostForm } from './features/posts/EditPostForm'\nimport { SinglePostPage } from './features/posts/SinglePostPage'\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n      <div className=\"App\">\n        <Switch>\n          <Route\n            exact\n            path=\"/\"\n            render={() => (\n              <React.Fragment>\n                <AddPostForm />\n                <PostsList />\n              </React.Fragment>\n            )}\n          />\n          <Route exact path=\"/posts/:postId\" component={SinglePostPage} />\n          <Route exact path=\"/editPost/:postId\" component={EditPostForm} />\n          <Redirect to=\"/\" />\n        </Switch>\n      </div>\n    </Router>\n  )\n}\n\nexport default App\n","import {\n  Server,\n  Model,\n  Factory,\n  belongsTo,\n  hasMany,\n  association,\n  RestSerializer,\n} from 'miragejs'\n\nimport { nanoid } from '@reduxjs/toolkit'\n\nimport faker from 'faker'\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\nimport { parseISO } from 'date-fns'\nimport seedrandom from 'seedrandom'\n\nconst IdSerializer = RestSerializer.extend({\n  serializeIds: 'always',\n})\n\n// Set up a seeded random number generator, so that we get\n// a consistent set of users / entries each time the page loads.\n// This can be reset by deleting this localStorage value,\n// or turned off by setting `useSeededRNG` to false.\nlet useSeededRNG = true\n\nlet rng = seedrandom()\n\nif (useSeededRNG) {\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\n  let seedDate\n\n  if (randomSeedString) {\n    seedDate = new Date(randomSeedString)\n  } else {\n    seedDate = new Date()\n    randomSeedString = seedDate.toISOString()\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\n  }\n\n  rng = seedrandom(randomSeedString)\n  setRandom(rng)\n  faker.seed(seedDate.getTime())\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min)\n  max = Math.floor(max)\n  return Math.floor(rng() * (max - min + 1)) + min\n}\n\nconst randomFromArray = (array) => {\n  const index = getRandomInt(0, array.length - 1)\n  return array[index]\n}\n\nconst notificationTemplates = [\n  'poked you',\n  'says hi!',\n  `is glad we're friends`,\n  'sent you a gift',\n]\n\nnew Server({\n  routes() {\n    this.namespace = 'fakeApi'\n    //this.timing = 2000\n\n    this.resource('users')\n    this.resource('posts')\n    this.resource('comments')\n\n    const server = this\n\n    this.post('/posts', function (schema, req) {\n      const data = this.normalizedRequestAttrs()\n      data.date = new Date().toISOString()\n      // Work around some odd behavior by Mirage that's causing an extra\n      // user entry to be created unexpectedly when we only supply a userId.\n      // It really want an entire Model passed in as data.user for some reason.\n      const user = schema.users.find(data.userId)\n      data.user = user\n\n      if (data.content === 'error') {\n        throw new Error('Could not save the post!')\n      }\n\n      const result = server.create('post', data)\n      return result\n    })\n\n    this.get('/posts/:postId/comments', (schema, req) => {\n      const post = schema.posts.find(req.params.postId)\n      return post.comments\n    })\n\n    this.get('/notifications', (schema, req) => {\n      const numNotifications = getRandomInt(1, 5)\n\n      let pastDate\n\n      const now = new Date()\n\n      if (req.queryParams.since) {\n        pastDate = parseISO(req.queryParams.since)\n      } else {\n        pastDate = new Date(now.valueOf())\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\n      }\n\n      // Create N random notifications. We won't bother saving these\n      // in the DB - just generate a new batch and return them.\n      const notifications = [...Array(numNotifications)].map(() => {\n        const user = randomFromArray(schema.db.users)\n        const template = randomFromArray(notificationTemplates)\n        return {\n          id: nanoid(),\n          date: faker.date.between(pastDate, now).toISOString(),\n          message: template,\n          user: user.id,\n          read: false,\n          isNew: true,\n        }\n      })\n\n      return { notifications }\n    })\n  },\n  models: {\n    user: Model.extend({\n      posts: hasMany(),\n    }),\n    post: Model.extend({\n      user: belongsTo(),\n      comments: hasMany(),\n    }),\n    comment: Model.extend({\n      post: belongsTo(),\n    }),\n    notification: Model.extend({}),\n  },\n  factories: {\n    user: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      firstName() {\n        return faker.name.firstName()\n      },\n      lastName() {\n        return faker.name.lastName()\n      },\n      name() {\n        return faker.name.findName(this.firstName, this.lastName)\n      },\n      username() {\n        return faker.internet.userName(this.firstName, this.lastName)\n      },\n\n      afterCreate(user, server) {\n        server.createList('post', 3, { user })\n      },\n    }),\n    post: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      title() {\n        return sentence()\n      },\n      date() {\n        return faker.date.recent(7)\n      },\n      content() {\n        return article(1)\n      },\n      reactions() {\n        return {\n          thumbsUp: 0,\n          hooray: 0,\n          heart: 0,\n          rocket: 0,\n          eyes: 0,\n        }\n      },\n      afterCreate(post, server) {\n        //server.createList('comment', 3, { post })\n      },\n\n      user: association(),\n    }),\n    comment: Factory.extend({\n      id() {\n        return nanoid()\n      },\n      date() {\n        return faker.date.past(2)\n      },\n      text() {\n        return paragraph()\n      },\n      post: association(),\n    }),\n  },\n  serializers: {\n    user: IdSerializer,\n    post: IdSerializer,\n    comment: IdSerializer,\n  },\n  seeds(server) {\n    server.createList('user', 3)\n  },\n})\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = [\r\n  { id: '0', name: 'Hemanth' },\r\n  { id: '1', name: 'Kumar' },\r\n  { id: '2', name: 'Jack' },\r\n]\r\n\r\nconst usersSlice = createSlice({\r\n  name: 'users',\r\n  initialState,\r\n  reducers: {},\r\n})\r\n\r\nexport default usersSlice.reducer\r\n","import { configureStore } from '@reduxjs/toolkit'\n\nimport postsReducer from '../features/posts/postsSlice';\nimport usersReducer from '../features/users/usersSlice';\n\nexport default configureStore({\n  reducer: {\n    posts: postsReducer,\n    users: usersReducer\n  }\n})","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport store from './app/store'\nimport { Provider } from 'react-redux'\n\nimport './api/server'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}